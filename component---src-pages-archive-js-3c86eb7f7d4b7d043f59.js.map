{"version":3,"sources":["webpack:///./src/components/PostsList.js","webpack:///./src/pages/archive.js"],"names":["data","className","node","title","website","alt","key","icon","location","type","keywords","description","id"],"mappings":"qeAyCA,EArCkB,WAChB,IAAMA,EAAI,EAAV,KAEA,OACE,wBAAIC,UAAS,+BACVD,EAAA,kBAAsB,YAAe,IAAZE,EAAW,EAAXA,KAClBC,EAAQD,qBAA0BA,SAAxC,KACME,EAAUF,SAAhB,KACMG,EAAMH,cAAZ,IAEA,OAAO,uBAAYI,IAAKJ,SAAjB,KAAmCC,MAAnC,EAAiDC,QAAjD,EAAmEC,IAAnE,EAA6EE,KAAML,cAAiBK,Y,YCcnH,UAtBoB,SAAC,GAAD,IAAGC,EAAH,kBAClB,oCACE,uBAAUA,SAAV,EAA8BC,KAA9B,UAA6CN,MAA7C,eAAoEO,SAAU,CAA9E,kBAAkGC,YAAW,+CAC7G,2BACE,6BAASC,GAAT,QAAoBX,UAAS,uBAC3B,wBAAIA,UAAS,2BADf,gBAEE,uBAAGA,UAAS,QAFd,8CAIE,yBAAKA,UAAS,YACZ,oBATU","file":"component---src-pages-archive-js-3c86eb7f7d4b7d043f59.js","sourcesContent":["import React from 'react'\nimport { useStaticQuery, graphql } from 'gatsby'\nimport LinkButton from './LinkButton'\n\nconst PostsList = () => {\n  const data = useStaticQuery(query)\n\n  return (\n    <ul className={`list-nav list-unstyled mb-0`}>\n      {data.allMdx.edges.map(({ node }) => {\n        const title = node.frontmatter.title || node.fields.slug\n        const website = node.fields.slug\n        const alt = node.frontmatter.alt\n\n        return <LinkButton key={node.fields.slug} title={title} website={website} alt={alt} icon={node.frontmatter.icon} />\n      })}\n    </ul>\n  )\n}\n\nconst query = graphql`\n  query {\n    allMdx(sort: { fields: [frontmatter___weight], order: DESC }, filter: { fields: { sourceInstanceName: { eq: \"posts\" } } }) {\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n            alt\n            website\n            icon\n            weight\n          }\n        }\n      }\n    }\n  }\n`\n\nexport default PostsList\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Layout from '../components/layout'\nimport PostsList from '../components/PostsList'\nimport MetaData from '../components/meta/MetaData'\n\nconst ArchivePage = ({ location }) => (\n  <>\n    <MetaData location={location} type=\"website\" title={`Post Archibe`} keywords={[`Digital Fabric`]} description={`Previous posts, articles and case studies.`} />\n    <Layout>\n      <section id=\"index\" className={`site-section hidden`}>\n        <h1 className={`h3 mb-2 text-capitolize`}>Post Archive</h1>\n        <p className={`lead`}>Previous posts, articles and case studies.</p>\n\n        <nav className={`site-nav`}>\n          <PostsList />\n        </nav>\n      </section>\n    </Layout>\n  </>\n)\n\nArchivePage.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ArchivePage\n"],"sourceRoot":""}